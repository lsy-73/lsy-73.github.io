<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Space Dog&#39;s Blog</title>
    <link>/post/</link>
    <description>Recent content in Posts on Space Dog&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 19 May 2022 10:26:23 +0800</lastBuildDate><atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>单例模式（2）</title>
      <link>/archives/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F2/</link>
      <pubDate>Thu, 19 May 2022 10:26:23 +0800</pubDate>
      
      <guid>/archives/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F2/</guid>
      <description>破坏双重校验锁的单例 public Lazyman{ private Lazyman(){} private volatile static Lazyman lazyman; public static Lazyman getInstance3(){ if(lazyman==null){ synchronized (Lazyman.class){ if(lazyman==null){ lazyman=new Lazyman(); } } } return lazyman; } //使用反射破坏单例模式 public static void main(String[] args) throws Exception { Lazyman instance = Lazyman.getI</description>
    </item>
    
    <item>
      <title>单例模式</title>
      <link>/archives/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 19 May 2022 08:26:57 +0800</pubDate>
      
      <guid>/archives/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>Java中单例(Singleton)模式是一种广泛使用的设计模式。通过单例模式可以保证系统中一个类只有一个实例而且该实例易于外界访问，从而方</description>
    </item>
    
    <item>
      <title>生产者消费者问题</title>
      <link>/archives/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 29 Apr 2022 12:50:22 +0800</pubDate>
      
      <guid>/archives/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98/</guid>
      <description>Synchronized版生产者消费者问题（旧版） /* * 线程之间的通信问题：生产者消费者问题 等待唤醒 通知唤醒 * 线程交替执行 A B C D操作同一个变</description>
    </item>
    
    <item>
      <title>Jprofiler的使用</title>
      <link>/archives/jprofiler%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 24 Apr 2022 20:10:48 +0800</pubDate>
      
      <guid>/archives/jprofiler%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>首先我们写一个报oom错误的代码 public class demo01 { public static void main(String[] args) { byte[] array=new byte[1*1024*1024];//1m 1兆 ArrayList&amp;lt;demo01&amp;gt; list=new ArrayList&amp;lt;demo01&amp;gt;(); int count=0;//计数 try{ while(true){ list.add(new demo01());//无限的向list</description>
    </item>
    
    <item>
      <title>双亲委派机制</title>
      <link>/archives/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Sun, 24 Apr 2022 20:09:28 +0800</pubDate>
      
      <guid>/archives/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6/</guid>
      <description>java类加载器 首先，我们知道，虚拟机在加载类的过程中需要使用类加载器进行加载，而在Java中，类加载器有很多，那么当JVM想要加载一个.c</description>
    </item>
    
    <item>
      <title>JVM Native</title>
      <link>/archives/jvm-native/</link>
      <pubDate>Fri, 22 Apr 2022 16:57:19 +0800</pubDate>
      
      <guid>/archives/jvm-native/</guid>
      <description>什么是本地方法Native？ 简单地讲，一个Native Method就是一个Java调用非Java代码的接口。一个Native Method是这</description>
    </item>
    
    <item>
      <title>时间与空间复杂度</title>
      <link>/archives/%E6%97%B6%E9%97%B4%E4%B8%8E%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</link>
      <pubDate>Fri, 08 Apr 2022 13:51:19 +0800</pubDate>
      
      <guid>/archives/%E6%97%B6%E9%97%B4%E4%B8%8E%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</guid>
      <description>时间复杂度和空间复杂度是衡量算法优劣的标准，效率可以用算法的时间复杂度来描述，而所占用的存储空间可以用算法的空间复杂度来描述。 时间复杂度：用</description>
    </item>
    
    <item>
      <title>快慢指针</title>
      <link>/archives/%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/</link>
      <pubDate>Thu, 07 Apr 2022 14:20:13 +0800</pubDate>
      
      <guid>/archives/%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/</guid>
      <description>关于快慢指针 怎么证明快慢指针在环中是可以相遇的？ 证明这个问题？可能你会说，只要快慢两个指针都进入环中，两者有速度差，快指针就一定能够追上慢指</description>
    </item>
    
    <item>
      <title>泛型</title>
      <link>/archives/%E6%B3%9B%E5%9E%8B/</link>
      <pubDate>Mon, 14 Mar 2022 10:29:23 +0800</pubDate>
      
      <guid>/archives/%E6%B3%9B%E5%9E%8B/</guid>
      <description>1. Java中的泛型是什么 ? 使用泛型的好处是什么? 原则是什么？ Java泛型设计原则：只要在编译时期没有出现警告，那么运行时期就不会出现Clas</description>
    </item>
    
    <item>
      <title>GPG的使用与创建</title>
      <link>/archives/gpg%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%88%9B%E5%BB%BA/</link>
      <pubDate>Mon, 31 Jan 2022 13:42:39 +0800</pubDate>
      
      <guid>/archives/gpg%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%88%9B%E5%BB%BA/</guid>
      <description>GPG介绍 提到 GPG 不得不提一下 PGP(Pretty Good Privacy) ， PGP 最开始是由 Phil Zimmermann 开发，开发的目的是为了躲避监视，如果文件在网络上明文传输，那是多么危险。 PGP 虽然受很多人喜</description>
    </item>
    
    <item>
      <title>作为大学生的我如何申请外币信用卡并用于境外支付</title>
      <link>/archives/%E4%BD%9C%E4%B8%BA%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%9A%84%E6%88%91%E5%A6%82%E4%BD%95%E7%94%B3%E8%AF%B7%E5%A4%96%E5%B8%81%E4%BF%A1%E7%94%A8%E5%8D%A1%E5%B9%B6%E7%94%A8%E4%BA%8E%E5%A2%83%E5%A4%96%E6%94%AF%E4%BB%98/</link>
      <pubDate>Fri, 17 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/archives/%E4%BD%9C%E4%B8%BA%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%9A%84%E6%88%91%E5%A6%82%E4%BD%95%E7%94%B3%E8%AF%B7%E5%A4%96%E5%B8%81%E4%BF%A1%E7%94%A8%E5%8D%A1%E5%B9%B6%E7%94%A8%E4%BA%8E%E5%A2%83%E5%A4%96%E6%94%AF%E4%BB%98/</guid>
      <description>前言 之前在购买 VPS 和域名时发现很多国外商家只支持 VISA，MASTERCARD 这两家的信用卡或者 PayPal，虽然国区 PayPal 可以绑定银联的借记卡/</description>
    </item>
    
    <item>
      <title>使用git创建版本库</title>
      <link>/archives/%E4%BD%BF%E7%94%A8git%E5%88%9B%E5%BB%BA%E7%89%88%E6%9C%AC%E5%BA%93/</link>
      <pubDate>Sun, 14 Nov 2021 20:58:22 +0800</pubDate>
      
      <guid>/archives/%E4%BD%BF%E7%94%A8git%E5%88%9B%E5%BB%BA%E7%89%88%E6%9C%AC%E5%BA%93/</guid>
      <description>初始化 输入命令： mkdir &amp;lt;项目名称&amp;gt; cd &amp;lt;项目名称&amp;gt; #进入目录 git init #初始仓库，新建一个 .git 目录 ls -la #查看所有文件 touch &amp;lt;file1&amp;gt; #创建一个</description>
    </item>
    
  </channel>
</rss>
